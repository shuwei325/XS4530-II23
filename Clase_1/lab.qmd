---
title: "Tema 2.3. Series de tiempo para pronóstico. Laboratorio 1"
subtitle: "Curso: Decisiones Estadísticas y Administrativas"
author: 
  name: "Shu Wei Chou Chen"
  affiliation: "Escuela de Estadística, UCR"
format: 
  html:
    theme: 
      light: [sketchy, code_font_light.scss]
      dark: [sketchy, code_font_dark.scss]
lang: es
editor: visual
toc: true
toc-depth: 3
toc-location: left
toc-title: "Contenido"
toc-expand: 1
number-sections: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE) 
```

# Librerías

```{r}
library(ggfortify)
library(forecast)
library(fpp2)
library(data.table)
library(TTR)
library(xts)
library(tidyverse)
library(lubridate)
```

# Ejemplo: Pasajeros de avión

```{r}
data("AirPassengers")
AirPassengers
class(AirPassengers)
AP <- as.numeric(AirPassengers)
class(AP)

# Serie de tiempo como un vector indexado.
AP.data <- data.frame(tiempo=seq_along(AP),pasajero=AP)
AP.data
```

## Formas diferentes de graficar.

```{r}
plot(AP.data$tiempo,AP.data$pasajero)
plot(AP.data$tiempo,AP.data$pasajero,type="l")
ggplot(AP.data, aes(x=tiempo,y=pasajero)) + geom_line()
```

## Diferentes objetos en R.

```{r}
str(AirPassengers)
str(AP)
```

## Algunas características de un objeto `ts`.

```{r}
AP.ts <- ts(AP, start = c(1949, 1), frequency = 12)
str(AP.ts)
frequency(AP.ts) #la frecuencia de la serie
cycle(AP.ts) #verificar el ciclo de cada observación
```

La función `plot` toma en cuenta el tipo de objeto.

```{r}
ts.plot(AP.ts)
plot(AP)
plot(AP.ts)

autoplot(AP.ts) + labs(x ="tiempo", y = "pasajeros (miles)", title=" Pasajeros (1949-1961)") 

```

## Otras posibilidades de gráficos.

Personalizar el gráfico usando el vector de tiempo.

```{r}
year <- rep(1949:1960,each=12)
month <- rep(1:12, times=12)
AP.data <- AP.data %>% mutate('year'=year, 'month'=month)

AP.data1 <- AP.data %>% 
            mutate(date = make_datetime(year = year, month = month))

AP.data1$date <- as.Date(AP.data1$date)
str(AP.data1)

plot1 <- ggplot(AP.data1, aes(x=date,y=pasajero)) + 
    geom_line() 
plot1
plot1 + scale_x_date(date_labels = "%m-%Y")


plot1 + scale_x_date(date_breaks = "1 month")
plot1 + scale_x_date(date_breaks = "6 month")
plot1 + scale_x_date(date_breaks = "1 year")
plot1 + scale_x_date(date_breaks = "2 year")
```

## Descomposición de series

```{r}
decomposeAP <- decompose(AP.ts,"multiplicative")
autoplot(decomposeAP)
```

¿Qué notamos en este gráfico? tendencia, ciclos, estacionalidad.

## 2. Efecto estacional

Interpretación de estos gráficos.

```{r}
boxplot(AP.ts~cycle(AP.ts),xlab="mes", ylab = "pasajeros (miles)")
ggseasonplot(AP.ts, year.labels=FALSE, continuous=TRUE)
ggseasonplot(AP.ts, year.labels=FALSE, continuous=TRUE, polar = TRUE)
```

# Ejemplo: Producción de cemento (cuatrimetre)

```{r}
cemento<-fpp2::qcement
str(cemento)
head(cemento)
tail(cemento)
```

Interpretación de estos gráficos.

```{r}
autoplot(cemento)
ggseasonplot(cemento, year.labels=FALSE, continuous=TRUE)
ggsubseriesplot(cemento)
```

# Ejemplo: gasto de medicamento anti-diabético (mensual)

```{r}
medicamento<-fpp2::a10
autoplot(medicamento)
ggseasonplot(medicamento, year.labels=FALSE, continuous=TRUE)
ggseasonplot(medicamento, year.labels=FALSE, continuous=TRUE, polar = TRUE)
```

# Ejemplo: Producción de cerveza en Australia

```{r}
cerveza<-fpp2::ausbeer
autoplot(cerveza)
ggseasonplot(cerveza, year.labels=FALSE, continuous=TRUE)
```

# Descomposición aditiva

```{r}
contrayentes<-read.csv("contrayentes.csv",sep=";")
y<-ts(contrayentes$serie,start=c(1978,1),frequency=12)
aditivo<-decompose(y,type="additive")
names(aditivo)
aditivo$x #serie original
aditivo$seasonal #índices estacionales normalizados 
aditivo$trend #tendencia
aditivo$random #residuo
aditivo$figure #índices estacionales normalizados
```

```{r}
plot(aditivo)
autoplot(aditivo)
```

Las barras indican que cada gráfico debe ser considerado a su tamaño relativo. Se puede eliminarlo con ´range.bars=FALSE´.

```{r}
autoplot(aditivo, range.bars=FALSE)
```

```{r warning=FALSE}
tend <- aditivo$trend
tend.estac <- aditivo$trend+aditivo$seasonal
serie.aj.estac<-aditivo$x-aditivo$seasonal

autoplot(cbind(aditivo$x,tend,tend.estac,serie.aj.estac),col=1:4, size = 1)+
  xlab("tiempo")+ylab("contrayentes")+
  ggtitle("Serie contrayentes")+
  scale_color_manual(labels = c("serie original","tend", "tendencia+estac","serie.aj.estac"), 
                     values = 1:4)
```

# Descomposición multiplicativa

```{r}
turistas<-read.csv("turistas.csv",sep=";")
y<-ts(turistas$turistas,start=c(1991,1),frequency=12)
ts.plot(y)
multiplicativo<-decompose(y,type="multiplicative")
names(multiplicativo)
multiplicativo$x #serie original
multiplicativo$seasonal #índices estacionales normalizados 
multiplicativo$trend #tendencia
multiplicativo$random #residuo
multiplicativo$figure #índices estacionales normalizados
serie.aj.estac<-y/multiplicativo$seasonal
```

```{r}
plot(multiplicativo)
autoplot(multiplicativo,range.bars = TRUE)
```

```{r warning=FALSE}
tend <- multiplicativo$trend
tend.estac <- multiplicativo$trend * multiplicativo$seasonal
serie.aj.estac<-multiplicativo$x/multiplicativo$seasonal

autoplot(cbind(multiplicativo$x,tend,tend.estac,serie.aj.estac),col=1:4, size = 1)+
  xlab("tiempo")+ylab("contrayentes")+
  ggtitle("Serie contrayentes")+
  scale_color_manual(labels = c("serie original","tend", "tendencia+estac","serie.aj.estac"), 
                     values = 1:4)
```

# Pronóstico

# Descomposición STL

```{r}
y.stl1<-stl(y,t.window=20, s.window="periodic", robust=TRUE)
plot(y.stl1)
```

```{r}
y.stl2<-stl(y,t.window=5, s.window="periodic", robust=TRUE)
plot(y.stl2)
```

```{r}
y.stl3<-stl(y,t.window=5, s.window=3, robust=TRUE)
plot(y.stl3)
```

# Pronóstico con STL

```{r}
y.train<-window(y,start=c(1991,1),end=c(1999,12))
y.test<-window(y,start=c(2000,1),end=c(2000,12))
y.stl3<-stl(y.train,t.window=20, s.window="periodic", robust=TRUE)

#forecast.stl
class(y.stl3)
pronostico<-forecast(y.stl3,h=12)
#default: suavizamiento exponencial

names(pronostico)
plot(pronostico)
points(y.test,type="l",col=2)
```

```{r}
accuracy(pronostico)
accuracy(pronostico,y.test)
```

Verificación de los cálculos:

```{r}
#entrenamiento
e.train<-y.train-fitted(pronostico)
(MAE.train<-sum(abs(e.train))/length(e.train))
(RMSE<-sqrt(sum((e.train)^2)/length(e.train)))

#prueba
n<-12
e<- y.test - pronostico$mean
(MAE<-sum(abs(e))/n)
sqrt(MSE<-sum(e^2)/n)
MSE
(MAPE<-sum(abs(100*e/y.test))/n)
```
